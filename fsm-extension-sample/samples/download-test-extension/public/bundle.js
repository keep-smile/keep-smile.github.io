(()=>{"use strict";var e={918:(e,t,i)=>{i.r(t),i.d(t,{ErrorType:()=>n,SHELL_EVENTS:()=>r,ShellSdk:()=>u});var n,r={Version1:{REQUIRE_CONTEXT:"V1.REQUIRE_CONTEXT",REQUIRE_AUTHENTICATION:"V1.REQUIRE_AUTHENTICATION",CLOSE:"V1.CLOSE",REQUIRE_PERMISSIONS:"V1.REQUIRE_PERMISSIONS",GET_PERMISSIONS:"V1.GET_PERMISSIONS",GET_SETTINGS:"V1.GET_SETTINGS",GET_STORAGE_ITEM:"V1.GET_STORAGE_ITEM",SET_STORAGE_ITEM:"V1.SET_STORAGE_ITEM",SET_VIEW_STATE:"V1.SET_VIEW_STATE",SET_TITLE:"V1.SET_TITLE",RESTORE_TITLE:"V1.RESTORE_TITLE",TO_APP:"V1.TO_APP",GET_FEATURE_FLAG:"V1.GET_FEATURE_FLAG",PRIVATE:{GET_ACCOUNT_SETTINGS:"V1.PRIVATE.GET_ACCOUNT_SETTINGS"},OUTLET:{ADD_PLUGIN:"V1.OUTLET.ADD_PLUGIN",REMOVE_PLUGIN:"V1.OUTLET.REMOVE_PLUGIN",REQUEST_CONTEXT:"V1.OUTLET.REQUEST_CONTEXT",LOADING_SUCCESS:"V1.OUTLET.LOADING_SUCCESS",LOADING_FAIL:"V1.OUTLET.LOADING_FAIL"}},Version2:{GET_STORAGE_ITEM:"V2.GET_STORAGE_ITEM",GET_PERMISSIONS:"V2.GET_PERMISSIONS"},ERROR:"ERROR"};!function(e){e.OUTLET_TIMEOUT="OUTLET_TIMEOUT",e.OUTLET_MAXIMUM_DEPTH="OUTLET_MAXIMUM_DEPTH",e.OUTLET_HTTPS_ERROR="OUTLET_HTTPS_ERROR"}(n||(n={}));var o=function(e,t){void 0===t&&(t=[]);var i=t.slice();for(var n in e)"string"==typeof e[n]?i.push(e[n]):"object"==typeof e[n]&&(i=o(e[n],i));return i},s=o(r),a=function(){function e(){this.messages=[]}return e.prototype.push=function(e,t){var i;i="incoming"===e.direction?"yes"===e.handled?"received and handled":"received and skipped":"sending",console.log(t+" "+i+" message: ",e),this.messages.push(e)},e.prototype.all=function(){return this.messages},e.prototype.allTable=function(){console.table(this.all())},e.prototype.filter=function(e){return this.messages.filter((function(t){if(e.type){if(Array.isArray(e.type)&&!e.type.some((function(e){return new RegExp(e).test(t.type)})))return!1;if("string"==typeof e.type&&!RegExp(e.type).test(t.type))return!1}if(e.component){if(Array.isArray(e.component)&&!e.component.some((function(e){return e===t.component})))return!1;if(e.component!==t.component)return!1}return!(e.direction&&e.direction!==t.direction||e.direction&&"incoming"===e.direction&&void 0!==e.handled&&e.handled!==("yes"===t.handled)||e.from&&e.from>t.timestamp||e.to&&e.to<t.timestamp)}))},e.prototype.filterTable=function(e){console.table(this.filter(e))},e}(),l=function(){function e(e,t){if(this.winRef=e,this.debugId=t,this.debugMode=!1,this.debugId){var i=this.winRef.localStorage.getItem("cs.fsm-shell.debug");i&&i.split(",").some((function(e){return e===t}))&&(this.debugMode=!0)}}return e.prototype.traceEvent=function(e,t,i,n,r){if(this.debugMode&&s.some((function(e){return e===t}))){var o={timestamp:new Date,component:this.debugId,direction:e,type:t,handled:"incoming"===e?r?"yes":"no":"n/a",to:n.to,from:n.from,payload:i};this.logEvent(o)}},e.prototype.logEvent=function(e){var t=this.winRef;t.fsmShellMessageLogger||(t.fsmShellMessageLogger=new a),t.fsmShellMessageLogger.push(e,this.debugId)},e}(),u=function(){function e(e,t,i,o,s){var a=this;this.target=e,this.origin=t,this.winRef=i,this.outletMaximumDepth=s,this.allowedOrigins=[],this.ignoredOrigins=[],this.on=function(e,t){return a.subscribersMap.has(e)||a.subscribersMap.set(e,[]),a.subscribersMap.get(e).push(t),function(){a.removeSubscriber(e,t)}},this.onViewState=function(e,t){return a.subscribersViewStateMap.has(e)||a.subscribersViewStateMap.set(e,[]),a.subscribersViewStateMap.get(e).push(t),function(){a.removeViewStateSubscriber(e,t)}},this.off=function(e,t){a.removeSubscriber(e,t)},this.offViewState=function(e,t){a.removeViewStateSubscriber(e,t)},this.onMessage=function(e){if(e.data&&"string"==typeof e.data.type&&(e.source===window.parent||!a.ignoredOrigins||!Array.isArray(a.ignoredOrigins)||0===a.ignoredOrigins.length||-1===a.ignoredOrigins.indexOf(e.origin)))if(e.source!==window.parent&&a.allowedOrigins&&Array.isArray(a.allowedOrigins)&&0!==a.allowedOrigins.length&&-1===a.allowedOrigins.indexOf(e.origin))console.error(e.origin+" is not in the list of known origins");else{var t=e.data;if(t.type!==r.Version1.OUTLET.LOADING_SUCCESS){if(!a.isRoot){var i=e.source;if(i){var o=Array.from(a.outletsMap.keys()).find((function(e){return e.contentWindow===i}));if(o&&o.src){if(new URL(o.src).origin!==e.origin)return void a.debugger.traceEvent("blocked",t.type,t.value,{from:t.from},!1);if(t.type===r.Version1.SET_VIEW_STATE)return void console.warn("[ShellSDk] A plugin tried to update viewState using SetViewState which is not allowed for security reason.");var s=t.from||[];if(t.type===r.Version1.OUTLET.REQUEST_CONTEXT&&s.length>=a.outletMaximumDepth)i.postMessage({type:r.Version1.OUTLET.LOADING_FAIL,value:{target:t.value.target,error:n.OUTLET_MAXIMUM_DEPTH},to:s},a.origin);else{var l=a.outletsMap.get(o);l&&(s=s.concat([l]),a.debugger.traceEvent("outgoing",t.type,t.value,{from:s},!0),a.target.postMessage({type:t.type,value:t.value,from:s},a.origin))}return}if(i!==a.target)return}if(t.type===r.Version1.SET_VIEW_STATE){a.outletsMap.forEach((function(e,i){i.contentWindow&&i.contentWindow.postMessage({type:t.type,value:t.value},a.origin)}));var u=a.subscribersViewStateMap.get(t.value.key);if(a.debugger.traceEvent("incoming",t.type,t.value,{},!!u),u)for(var c=0,g=u;c<g.length;c++)(0,g[c])(t.value.value);return}if(t.type!==r.Version1.OUTLET.REQUEST_CONTEXT||!t.value.hasOwnProperty("isConfigurationMode")||t.value.hasOwnProperty("target")||t.value.hasOwnProperty("plugin")||a.outletsMap.forEach((function(e,i){i.contentWindow&&i.contentWindow.postMessage({type:t.type,value:t.value},a.origin)})),t.to&&0!==t.to.length&&t.type!==r.Version1.TO_APP)return a.debugger.traceEvent("outgoing",t.type,t.value,{to:t.to},!0),void a.outletsMap.forEach((function(e,i){t.to&&-1!==t.to.indexOf(e)&&i.contentWindow&&i.contentWindow.postMessage({type:t.type,value:t.value,to:t.to.filter((function(t){return t!==e}))},a.origin)}))}var d=a.subscribersMap.get(t.type);if(a.debugger.traceEvent("incoming",t.type,t.value,{from:t.from},!!d),d)for(var f=0,p=d;f<p.length;f++)(0,p[f])(t.value,e.origin,t.type===r.Version1.SET_VIEW_STATE?null:t.from);if(!a.isRoot&&t.type===r.Version1.REQUIRE_CONTEXT){var E=("string"==typeof t.value?JSON.parse(t.value):t.value).viewState;if(E)for(var T=0,h=Object.keys(E);T<h.length;T++){var S=h[T];if(u=a.subscribersViewStateMap.get(""+S))for(var O=0,y=u;O<y.length;O++)(0,y[O])(E[S])}a.target.postMessage({type:r.Version1.OUTLET.LOADING_SUCCESS},a.origin)}}}},this.subscribersMap=new Map,this.subscribersViewStateMap=new Map,this.outletsMap=new Map,this.initMessageApi(),this.debugger=new l(i,o),this.isRoot=null==e}return e.init=function(t,i,n,r,o){return void 0===n&&(n=window),void 0===r&&(r=""),void 0===o&&(o=1),e._instance=new e(t,i,n,r,o),e._instance},Object.defineProperty(e,"instance",{get:function(){if(!e._instance)throw new Error("ShellSdk wasn't initialized.");return e._instance},enumerable:!0,configurable:!0}),e.isInsideShell=function(){var e=window;return e.self!==e.top},e.prototype.setAllowedOrigins=function(e){void 0===e&&(e=[]),this.allowedOrigins="*"===e?[]:e},e.prototype.addAllowedOrigin=function(e){var t;try{t=new URL(e)}catch(e){return}this.allowedOrigins.push(t.origin)},e.prototype.removeAllowedOrigin=function(e){var t;try{t=new URL(e)}catch(e){return}var i=this.allowedOrigins.findIndex((function(e){return e===t.origin}));this.allowedOrigins=this.allowedOrigins.filter((function(e,t){return t!==i}))},e.prototype.isOriginAllowed=function(e){var t;try{t=new URL(e)}catch(e){return!1}return this.allowedOrigins.some((function(e){return e===t.origin}))},e.prototype.setIgnoredOrigins=function(e){void 0===e&&(e=[]),this.ignoredOrigins=e},e.prototype.addIgnoredOrigin=function(e){var t;try{t=new URL(e)}catch(e){return}this.ignoredOrigins.push(t.origin)},e.prototype.removeIgnoredOrigin=function(e){var t;try{t=new URL(e)}catch(e){return}var i=this.ignoredOrigins.findIndex((function(e){return e===t.origin}));this.ignoredOrigins=this.ignoredOrigins.filter((function(e,t){return t!==i}))},e.prototype.registerOutlet=function(e){this.outletsMap.set(e,"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(e){var t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)})))},e.prototype.unregisterOutlet=function(e){this.outletsMap.delete(e)},e.prototype.getTarget=function(){return this.target},e.prototype.setTarget=function(e,t){(this.target!==e||this.origin!==t)&&(this.target=e,this.origin=t)},e.prototype.emit=function(e,t,i){if(!this.postMessageHandler)throw new Error("ShellSdk wasn't initialized, message handler not set.");this.postMessageHandler(e,t,this.isRoot?i:void 0)},e.prototype.setViewState=function(e,t){if(!this.postMessageHandler)throw new Error("ShellSdk wasn't initialized, message handler not set.");this.postMessageHandler(r.Version1.SET_VIEW_STATE,{key:e,value:t})},e.prototype.removeSubscriber=function(e,t){var i=this.subscribersMap.get(e);i&&this.subscribersMap.set(e,i.filter((function(e){return e!==t})))},e.prototype.removeViewStateSubscriber=function(e,t){var i=this.subscribersViewStateMap.get(e);i&&this.subscribersViewStateMap.set(e,i.filter((function(e){return e!==t})))},e.prototype.initMessageApi=function(){var e=this;this.postMessageHandler=function(t,i,n){if(!e.target)throw new Error("ShellSdk wasn't initialized, target is missing.");if(!e.origin)throw new Error("ShellSdk wasn't initialized, origin is missing.");e.debugger.traceEvent("outgoing",t,i,{to:n},!0),e.target.postMessage({type:t,value:i,to:n},e.origin)},this.winRef.addEventListener("message",this.onMessage)},e.VERSION="1.11.2",e.BUILD_TS="2021-07-26T08:08:36.847Z",e}()},607:function(e,t,i){var n=this&&this.__createBinding||(Object.create?function(e,t,i,n){void 0===n&&(n=i),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[i]}})}:function(e,t,i,n){void 0===n&&(n=i),e[n]=t[i]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var i in e)"default"!==i&&Object.prototype.hasOwnProperty.call(e,i)&&n(t,e,i);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0});const s=o(i(38));window.addEventListener("load",(async()=>{let e="";if(s.isInsideShell){const t=await s.getContext();e="<ul>";for(const[i,n]of Object.entries(t))e+="object"==typeof n?`<li>${i}: ${JSON.stringify(n)}</li>`:`<li>${i}: ${n}</li>`;e+="</ul>"}var t;t=e,document.querySelectorAll("#info")[0].innerHTML=t;const i=document.getElementById("fileSelect"),n=document.getElementById("fileElem"),r=document.getElementById("fileList");console.log("ELEMENTS: ",{fileSelect:i,fileElem:n,fileList:r}),i.addEventListener("click",(function(e){console.log("File select cliecked"),n&&(console.log("Trigger fileElem click"),n.click()),e.preventDefault()}),!1),n.addEventListener("change",(function(){if(console.log("fileElem changed"),n.files.length){r.innerHTML="";const e=document.createElement("ul");r.appendChild(e);for(let t=0;t<n.files.length;t++){const i=document.createElement("li");e.appendChild(i);const r=document.createElement("a");r.innerHTML=`Download file ${t+1}`,r.href=URL.createObjectURL(n.files[t]),r.download=n.files[t].name,i.appendChild(r);const o=document.createElement("span");o.innerHTML=n.files[t].name+": "+n.files[t].size+" bytes",i.appendChild(o)}}else r.innerHTML="<p>No files selected!</p>"}),!1)}))},38:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getContext=t.isInsideShell=void 0;const n=i(918);let r;n.ShellSdk.isInsideShell()&&(r=n.ShellSdk.init(parent,"*")),t.isInsideShell=!!r,t.getContext=()=>new Promise(((e,t)=>{r?(r.emit(n.SHELL_EVENTS.Version1.REQUIRE_CONTEXT,{auth:{response_type:"token"}}),r.on(n.SHELL_EVENTS.Version1.REQUIRE_CONTEXT,(t=>{e(JSON.parse(t))}))):t("App is not running inside Shell")}))}},t={};function i(n){var r=t[n];if(void 0!==r)return r.exports;var o=t[n]={exports:{}};return e[n].call(o.exports,o,o.exports,i),o.exports}i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,